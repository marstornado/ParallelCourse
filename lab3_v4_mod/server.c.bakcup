//
//  main.c
//  lab3_udp
//
//  Created by mastornado on 10/12/14.
//  Copyright (c) 2014 mastornado. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

#define BUF_SIZE 1024


int main(int argc, const char * argv[]) {


    char buf[BUF_SIZE];
    struct sockaddr_in serv_addr, cli_addr;
    socklen_t socSize;
    int s, port, revlen;


    socSize = sizeof(struct sockaddr_in);

    if (argc < 2) {
        printf("please input the right parameter");
        return 1;
    }

    s=socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if(s < 0) {
        printf("fail to create a new socket");
        return 1;
    }

    //bind to server port */
    port = atoi(argv[1]);

    memset((char *) &serv_addr, 0, sizeof(struct sockaddr_in));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(port);
    serv_addr.sin_addr.s_addr = htons(INADDR_ANY);

    if (bind(s, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) == -1) {
        printf("bind error");
        return 1;
    }

    while (1){
        printf("waiting on port %d\n", port);
        revlen = recvfrom(s, buf, BUF_SIZE, 0, (struct sockaddr *) &cli_addr, &socSize);
        printf("Received from %s:%d: ",inet_ntoa(cli_addr.sin_addr),ntohs(cli_addr.sin_port));
        fflush(stdout);
        write(1, buf, revlen);
        write(1, "\n", 1);

        /* echo back to client */
        sendto(s, buf, revlen, 0, (struct sockaddr *) &cli_addr, socSize);
    }

    close(s);
    return 0;
}
